messages = FALSE,
fig.width = 40,
fig.height = 20,
fig.path = "C:\\Users\\smf19\\OneDrive\\Desktop\\JobMarket\\"
)
# kable
options(knitr.kable.NA = '')
# Set the graphical theme
ggplot2::theme_set(ggplot2::theme_light())
library(ggplot2)
library(tidyverse)
library(stringr)
library(AER)
library(kableExtra)
library(gridExtra)
library(broom)
library(haven)
library(fixest)
library(stargazer)
library(lubridate)
# load model summary and set options
library(modelsummary)
gm <- modelsummary::gof_map
gm$omit <- TRUE
gm$omit[1] <- FALSE
gm$omit[6] <- FALSE
gm$omit[5] <- FALSE
gm$omit[17] <- FALSE
df <- read.csv("C:\\Users\\smf19\\Downloads\\14100023.csv")
categorical_vars <- c("GEO", "Labour.force.characteristics","North.American.Industry.Classification.System..NAICS.", "Sex", "Age.group")
df[categorical_vars] <- lapply(df[categorical_vars], as.factor)
data_diff <- df %>%
mutate(North.American.Industry.Classification.System..NAICS. = str_extract(North.American.Industry.Classification.System..NAICS., "^[^\\[]+")) %>%
filter(REF_DATE >= 2000 & Labour.force.characteristics == "Unemployment rate") %>%
select(-c(UOM, UOM_ID, SCALAR_FACTOR, SCALAR_ID, VECTOR, COORDINATE, DGUID, STATUS, SYMBOL, TERMINATED, DECIMALS,Labour.force.characteristics)) %>%
drop_na()
df_productivity <- read.csv("C:\\Users\\smf19\\Downloads\\productivity data\\36100208.csv") %>%
filter(Multifactor.productivity.and.related.variables %in% c("Labour productivity") & REF_DATE >= 2000 ) %>%
mutate(across(c(GEO, North.American.Industry.Classification.System..NAICS.), as.factor)) %>%
mutate(North.American.Industry.Classification.System..NAICS. = factor(str_extract(North.American.Industry.Classification.System..NAICS., "^[^\\[]+"))) %>%
rename(`Labour Productivity (Index, 2012 = 100)` = VALUE) %>%
select(-c(UOM, UOM_ID, SCALAR_FACTOR, SCALAR_ID, VECTOR, COORDINATE, DGUID, STATUS, SYMBOL, TERMINATED, DECIMALS,Multifactor.productivity.and.related.variables))
df_unionization <- read.csv("C:\\Users\\smf19\\Downloads\\unionization data\\14100132.csv") %>%
filter(Union.status == "Unionization rate" & REF_DATE >= 2000) %>%
mutate(across(c(GEO, Union.status, North.American.Industry.Classification.System..NAICS., Sex), as.factor)) %>%
select(-c(UOM, UOM_ID, SCALAR_FACTOR, SCALAR_ID, VECTOR, COORDINATE, DGUID, STATUS, SYMBOL, TERMINATED, DECIMALS, Union.status))
df_tech <- read.csv("C:\\Users\\smf19\\Downloads\\ai data\\27100367.csv") %>%
filter(REF_DATE >= 2000 &
!North.American.Industry.Classification.System..NAICS. %in% c("Total, all industries", "Goods-producing sector", "Services-producing sector")) %>%
mutate(across(c(GEO, Advanced.or.emerging.technologies), as.factor)) %>%
mutate(North.American.Industry.Classification.System..NAICS. = str_extract(North.American.Industry.Classification.System..NAICS., "^[^\\[]+")) %>%
select(-c(UOM, UOM_ID, SCALAR_FACTOR, SCALAR_ID, VECTOR, COORDINATE, DGUID, STATUS, SYMBOL, TERMINATED, DECIMALS))
df_gdp <- read.csv("C:\\Users\\smf19\\Downloads\\gdp data\\36100401.csv") %>%
filter(REF_DATE >= 2000 & GEO == "Canada") %>%
select(-c(VECTOR, COORDINATE, DGUID, STATUS, SYMBOL, TERMINATED, DECIMALS, UOM_ID, SCALAR_ID))
df_investment <- read.csv("C:\\Users\\smf19\\Downloads\\investment data\\34100035.csv") %>%
select(-c(VECTOR, COORDINATE, DGUID, STATUS, SYMBOL, TERMINATED, DECIMALS, UOM_ID, SCALAR_ID)) %>%
filter(Capital.and.repair.expenditures == "Capital expenditures" & GEO == "Canada")
# Check categorical variables/levels
sapply(df, function(x){
if (is.factor(x)) {
levels(x)
} else {
"Not a factor"
}
})
unemployment_rate_data <- df %>%
filter(Labour.force.characteristics == "Unemployment rate" & GEO == "Canada" & REF_DATE >= "2006" & Age.group == "25 to 54 years" &
Sex == "Both sexes") %>%
group_by(REF_DATE, North.American.Industry.Classification.System..NAICS.) %>%
drop_na(VALUE)
ggplot(unemployment_rate_data, aes(x = REF_DATE, y = VALUE, color = North.American.Industry.Classification.System..NAICS., group = North.American.Industry.Classification.System..NAICS.)) +
geom_line(size = 2) +
scale_color_discrete(name = "") + # Change the name of the legend title
labs( x= "Year", y = "Unemployment Rate", title = 'Unemployment Rate by Industry') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 30,margin = margin(t = 10)),
axis.text.y = element_text(vjust = 0.5, hjust=1, size = 30,margin = margin(r = 10)),
axis.title.y = element_text(size = 30, margin = margin(r = 30)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray90"),
panel.background = element_rect(fill = "white"),
legend.key.size = unit(10, "points"),
legend.text = element_text(size = 20, margin = margin(b = 10)),
legend.title = element_text(size = 30),
legend.position = "bottom",
plot.title = element_text(size=60, margin = margin(t = 50 , b = 50))) +
geom_text(data = unemployment_rate_data %>% group_by(North.American.Industry.Classification.System..NAICS.) %>% summarize(REF_DATE = max(REF_DATE), VALUE = max(VALUE)), aes(x = REF_DATE, y = VALUE, label = North.American.Industry.Classification.System..NAICS.),hjust = 0.1, size = 6, check_overlap = TRUE)
GoodsSector <- factor(c("Agriculture", "Forestry, fishing, mining, quarrying, oil and gas", "Utilities", "Construction", "Manufacturing"))
ServicesSector <- factor(c("Wholesale and retail trade", "Transportation and warehousing", "Finance, insurance, real estate, rental and leasing",
"Professional, scientific and technical services", "Business, building and other support services", "Educational services",
"Health care and social assistance", "Information, culture and recreation", "Accommodation and food services",
"Other services \\(except public administration\\)", "Public administration"))
all_sectors <- c(GoodsSector, ServicesSector)
unemp_sectorized <- unemployment_rate_data %>%
mutate(Industry = factor(str_extract(North.American.Industry.Classification.System..NAICS., "^[^\\[]+"))) %>%
mutate(Sector = ifelse(str_detect(Industry, paste(GoodsSector, collapse = "|")), "Goods", "Services")) %>%
filter(str_detect(Industry, paste(all_sectors, collapse = "|")))
ggplot(unemp_sectorized, aes(x = REF_DATE, y = VALUE, color = Industry, group = Industry)) +
geom_line(size = 2) +
labs(x = "Year", y = "Unemployment Rate", title = 'Unemployment Rate by Industry (Goods/Service Sectors Only)') +
scale_color_discrete(name = "") + # Change the name of the legend title
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 30,margin = margin(t = 10)),
axis.text.y = element_text(vjust = 0.5, hjust=1, size = 30,margin = margin(r = 10)),
axis.title.y = element_text(size = 30, margin = margin(r = 30)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray90"),
panel.background = element_rect(fill = "white"),
legend.key.size = unit(10, "points"),
legend.text = element_text(size = 20, margin = margin(b = 10)),
legend.title = element_text(size = 30),
legend.position = "bottom",
plot.title = element_text(size=60, margin = margin(t = 50 , b = 50))) +
geom_text(data = unemp_sectorized %>%
group_by(Industry) %>%
summarize(REF_DATE = max(REF_DATE), VALUE = max(VALUE)),
aes(x = REF_DATE, y = VALUE, label = Industry),hjust = 0.1, size = 6, check_overlap = TRUE)
ggplot(unemp_sectorized, aes(x = REF_DATE, y = VALUE, color = Industry, group = Industry)) +
geom_line(size = 2) +
labs(x = "Year", y = "Unemployment Rate", title = 'Unemployment Rate by Industry') +
facet_wrap(~ Industry, scales = "free_y", ncol = 3) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 10),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray90"),
panel.background = element_rect(fill = "white"),
legend.key.size = unit(50, "points"),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
plot.title = element_text(size=30))
cor_data <- unemp_sectorized %>%
select(REF_DATE, North.American.Industry.Classification.System..NAICS., VALUE) %>%
spread(North.American.Industry.Classification.System..NAICS., VALUE) %>%
select(-REF_DATE) %>%
cor()
cor_data[lower.tri(cor_data)] <- NA
df_lm <- df %>%
filter(Labour.force.characteristics == "Unemployment rate" & GEO == "Canada"  & REF_DATE >= 2000) %>%
select(-c("Labour.force.characteristics"))
merged_union <- full_join(df_lm, df_unionization, by = c("REF_DATE", "North.American.Industry.Classification.System..NAICS.", "GEO", "Sex")) %>%
select(-c(SYMBOL, TERMINATED, STATUS, UOM, UOM_ID, SCALAR_ID, SCALAR_FACTOR, VECTOR, COORDINATE, DECIMALS, DGUID)) %>%
drop_na()
merge_UandGDP <- full_join(merged_union, df_gdp, by = c("REF_DATE", "North.American.Industry.Classification.System..NAICS.")) %>%
rename(`Unemployment rate (Percent)` = VALUE.x,
`Unionization rate (Percent)` = VALUE.y,
`GDP at basic prices (millions $)`= VALUE) %>%
select(-c(GEO.y, SCALAR_FACTOR, UOM)) %>%
drop_na()
merge_UIGDP <- full_join(merge_UandGDP, df_investment, by = c("REF_DATE" , "North.American.Industry.Classification.System..NAICS.")) %>%
select(-c(`SCALAR_FACTOR`, Capital.and.repair.expenditures, GEO.x, UOM)) %>%
rename(`Capital Expenditure (millions $)` = VALUE) %>%
drop_na()
# Create a list of industry, age group, and sex classification combinations
industries <- unique(merge_UIGDP$North.American.Industry.Classification.System..NAICS.)
ages <- unique(merge_UIGDP$Age.group)
sexes <- unique(merge_UIGDP$Sex)
combo_list <- expand.grid(Industry = industries, Age_Group = ages, Sex = sexes)
# Define a function to fit the linear regression model for each combination of variables
reg_funcUR <- function(df) {
lag_ur <- lag(df$`Unemployment rate (Percent)`)
lag_ur[is.na(lag_ur)] <- mean(df$`Unemployment rate (Percent)`, na.rm = TRUE) # impute missing with mean of `Unemployment rate (Percent)`
lm(`Unemployment rate (Percent)` ~`Unionization rate (Percent)` + `GDP at basic prices (millions $)` + `Capital Expenditure (millions $)` + lag_ur , data = df)
}
reg_func <- function(df) {
lm(`Unemployment rate (Percent)` ~`Unionization rate (Percent)` + `GDP at basic prices (millions $)` + `Capital Expenditure (millions $)` , data = df)
}
# Use lapply to apply the function to each combination of variables
reg_results <- lapply(1:nrow(combo_list), function(i) {
industry <- combo_list$Industry[i]
age <- combo_list$Age_Group[i]
sex <- combo_list$Sex[i]
df <- merge_UIGDP %>%
filter(North.American.Industry.Classification.System..NAICS. == industry & Age.group == age & Sex == sex)
if (nrow(df) > 0) {
reg_result <- reg_func(df)
reg_result$industry <- industry
reg_result$age_group <- age
reg_result$sex <- sex
reg_result
} else {
NULL
}
})
reg_resultsUR <- lapply(1:nrow(combo_list), function(i) {
industry <- combo_list$Industry[i]
age <- combo_list$Age_Group[i]
sex <- combo_list$Sex[i]
df <- merge_UIGDP %>%
filter(North.American.Industry.Classification.System..NAICS. == industry & Age.group == age & Sex == sex)
if (nrow(df) > 0) {
reg_result <- reg_funcUR(df)
reg_result$industry <- industry
reg_result$age_group <- age
reg_result$sex <- sex
reg_result
} else {
NULL
}
})
# Check for null models
null_indices <- which(sapply(reg_results, is.null))
# data frame that holds all NULL combinations
combo_list[null_indices, ]
# remove NULL models
reg_results <- reg_results[!sapply(reg_results, is.null)]
# Combine the results into a single dataframe
reg_df <- as.data.frame(do.call(rbind, reg_results))
# List of modelsummary tables
modsummaries <- lapply(reg_results, function(model) {
if (!is.null(model)) {
modelsummary(model,
statistic_override = sandwich,
stars = T,
fmt = 8,
output = "html")
} else {
NULL
}
})
### Helper functions
# function to find model index given specific combination of control variables
find_model <- function(NAICS, AGES, SEX) {
# Loop through reg_results and check if combination matches input values
for (i in 1:length(reg_results)) {
if (reg_results[[i]]$industry == NAICS &
reg_results[[i]]$age_group == AGES &
reg_results[[i]]$sex == SEX) {
return(i)
}
}
# If no matching model is found, return NA
return(NA)
}
# Set values for NAICS, AGES, and SEX
NAICS_val <- "Utilities [22]"
AGES_val <- "15 years and over"
SEX_val <- "Both sexes"
# Find index of corresponding model
model_index <- find_model(NAICS_val, AGES_val, SEX_val)
# Print lm object for corresponding model
if (!is.na(model_index)) {
print(reg_results[[model_index]])
} else {
print("No matching model found.")
}
# Inverse function that returns combination given model index
get_model_vars <- function(index, data = reg_results) {
industry <- reg_results[[index]]$industry
age_group <- reg_results[[index]]$age_group
sex <- reg_results[[index]]$sex
return(data.frame(Industry = industry, Age_Group = age_group, Sex = sex))
}
get_model_vars(1)
s <- summary(reg_results[[model_index]])
s$coefficients
s$residuals
# Use nest() function to group the data by Industry, Age_Group, and Sex
grouped_data <- merge_UIGDP %>%
group_by(North.American.Industry.Classification.System..NAICS., Age.group, Sex) %>%
nest()
# Use map() function to apply the reg_func() to each group
reg_results_grouped <- grouped_data %>%
mutate(model = map(data, reg_func)) %>%
filter(!map_lgl(model, ~ any(is.na(coef(.x))) | any(is.nan(coef(.x))))) %>%
mutate(n_obs = sapply(data, nrow))
# Extract the coefficients, industry, age group, and sex for each model
# Define a function to format p-values
format_p_value <- function(p) {
if (is.na(p)) {
return("")
} else if (p < 0.001) {
return(cell_spec(paste0(format(p, nsmall = 6), "***"), color = "green", bold = TRUE, underline = TRUE))
} else if (p < 0.01) {
return(cell_spec(paste0(format(p, nsmall = 6), "**"), color = "green", bold = TRUE))
} else if (p < 0.05) {
return(cell_spec(paste0(format(p, nsmall = 6), "*"), color = "green"))
} else {
return(format(p, nsmall = 6))
}
}
results_table_filtered <- reg_results_grouped %>%
mutate(intercept = map_dbl(model, ~coef(.)[1]),
unionization_rate = map_dbl(model, ~coef(.)[2]),
gdp = map_dbl(model, ~coef(.)[3]),
capex = map_dbl(model, ~coef(.)[4]),
p_union = map_dbl(model, ~summary(.)$coefficients[2,4]),
p_gdp = map_dbl(model, ~summary(.)$coefficients[3,4]),
p_capex = map_dbl(model, ~summary(.)$coefficients[4,4])) %>%
select(intercept, unionization_rate, gdp, capex, p_union, p_gdp, p_capex, p_ur) %>%
mutate(across(everything(), round, 6),
p_union = format_p_value(p_union),
p_gdp = format_p_value(p_gdp),
p_capex = format_p_value(p_capex)) %>%
filter(p_union < 0.05 | p_gdp < 0.05 | p_capex < 0.05) %>%
mutate(across(c(p_union, p_gdp, p_capex), ~if_else(. == "", "", paste0(., " ")))) %>%
mutate(across(c(p_union, p_gdp, p_capex), as_factor)) %>%
kable(format = "html",
caption = "Regression Results",
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
fixed_thead = TRUE,
position = "center") %>%
column_spec(1:7, bold = TRUE)
results_table_filtered <- reg_results_grouped %>%
mutate(intercept = map_dbl(model, ~coef(.)[1]),
unionization_rate = map_dbl(model, ~coef(.)[2]),
gdp = map_dbl(model, ~coef(.)[3]),
capex = map_dbl(model, ~coef(.)[4]),
p_union = map_dbl(model, ~summary(.)$coefficients[2,4]),
p_gdp = map_dbl(model, ~summary(.)$coefficients[3,4]),
p_capex = map_dbl(model, ~summary(.)$coefficients[4,4])) %>%
select(intercept, unionization_rate, gdp, capex, p_union, p_gdp, p_capex) %>%
mutate(across(everything(), round, 6),
p_union = format_p_value(p_union),
p_gdp = format_p_value(p_gdp),
p_capex = format_p_value(p_capex)) %>%
filter(p_union < 0.05 | p_gdp < 0.05 | p_capex < 0.05) %>%
mutate(across(c(p_union, p_gdp, p_capex), ~if_else(. == "", "", paste0(., " ")))) %>%
mutate(across(c(p_union, p_gdp, p_capex), as_factor)) %>%
kable(format = "html",
caption = "Regression Results",
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
fixed_thead = TRUE,
position = "center") %>%
column_spec(1:7, bold = TRUE)
results_table_filtered
library(ggplot2)
ggplot(merge_UIGDP, aes(x = `Unionization rate (Percent)`, y = `Unemployment rate (Percent)`)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Unionization rate (Percent)", y = "Unemployment rate (Percent)")
ggplot(merge_UIGDP, aes(x = `Unionization rate (Percent)`, y = `Unemployment rate (Percent)`)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(x = "Unionization rate (Percent)", y = "Unemployment rate (Percent)")
# Create list of independent variables
ind_vars <- c("Unionization rate (Percent)",
"GDP at basic prices (millions $)",
"Capital Expenditure (millions $)")
# Create function to plot each variable
plot_ind_var <- function(var) {
ggplot(merge_UIGDP, aes(x = !!sym(var), y = `Unemployment rate (Percent)`)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(x = var, y = "Unemployment rate (Percent)")
}
# Use mapply to apply function to each variable
plots <- mapply(plot_ind_var, var = ind_vars, SIMPLIFY = FALSE)
# Arrange plots in a grid using the cowplot package
library(cowplot)
install.packages("cowplot")
# Arrange plots in a grid using the cowplot package
library(cowplot)
plot_grid(plotlist = plots, ncol = 2)
s
ye
reg_results[[model_index]]
class(reg_results[[model_index]])
durbinWatsonTest(reg_results[[model_index]])
durbinWatsonTest(reg_results[[model_index]])$statistic[1]
durbinWatsonTest(reg_results[[model_index]])$
durbinWatsonTest(reg_results[[model_index]])$Statistic
durbinWatsonTest(reg_results[[model_index]])$Statistic[1]
durbinWatsonTest(reg_results[[model_index]])$statistic
durbinWatsonTest(reg_results[[model_index]])$Statistic
durbinWatsonTest(reg_results[[model_index]])[3,]
durbinWatsonTest(reg_results[[model_index]])[3]
durbinWatsonTest(reg_results[[model_index]])[2]
results_table_filtered <- reg_results_grouped %>%
mutate(intercept = map_dbl(model, ~coef(.)[1]),
unionization_rate = map_dbl(model, ~coef(.)[2]),
gdp = map_dbl(model, ~coef(.)[3]),
capex = map_dbl(model, ~coef(.)[4]),
p_union = map_dbl(model, ~summary(.)$coefficients[2,4]),
p_gdp = map_dbl(model, ~summary(.)$coefficients[3,4]),
p_capex = map_dbl(model, ~summary(.)$coefficients[4,4]),
durbin_watson = map_dbl(model, ~durbinWatsonTest(.)[2])) %>%
select(intercept, unionization_rate, gdp, capex, p_union, p_gdp, p_capex, durbin_watson) %>%
mutate(across(everything(), round, 6),
p_union = format_p_value(p_union),
p_gdp = format_p_value(p_gdp),
p_capex = format_p_value(p_capex)) %>%
filter(p_union < 0.05 | p_gdp < 0.05 | p_capex < 0.05) %>%
mutate(across(c(p_union, p_gdp, p_capex), ~if_else(. == "", "", paste0(., " ")))) %>%
mutate(across(c(p_union, p_gdp, p_capex), as_factor)) %>%
kable(format = "html",
caption = "Regression Results",
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
fixed_thead = TRUE,
position = "center") %>%
column_spec(1:8, bold = TRUE)
k <- durbinWatsonTest(reg_results[[model_index]])[2]
k <- durbinWatsonTest(reg_results[[model_index]])
k[2]
View(k)
k$dw
results_table_filtered <- reg_results_grouped %>%
mutate(intercept = map_dbl(model, ~coef(.)[1]),
unionization_rate = map_dbl(model, ~coef(.)[2]),
gdp = map_dbl(model, ~coef(.)[3]),
capex = map_dbl(model, ~coef(.)[4]),
p_union = map_dbl(model, ~summary(.)$coefficients[2,4]),
p_gdp = map_dbl(model, ~summary(.)$coefficients[3,4]),
p_capex = map_dbl(model, ~summary(.)$coefficients[4,4]),
durbin_watson = map_dbl(model, ~durbinWatsonTest(.)$dw)) %>%
select(intercept, unionization_rate, gdp, capex, p_union, p_gdp, p_capex, durbin_watson) %>%
mutate(across(everything(), round, 6),
p_union = format_p_value(p_union),
p_gdp = format_p_value(p_gdp),
p_capex = format_p_value(p_capex)) %>%
filter(p_union < 0.05 | p_gdp < 0.05 | p_capex < 0.05) %>%
mutate(across(c(p_union, p_gdp, p_capex), ~if_else(. == "", "", paste0(., " ")))) %>%
mutate(across(c(p_union, p_gdp, p_capex), as_factor)) %>%
kable(format = "html",
caption = "Regression Results",
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
fixed_thead = TRUE,
position = "center") %>%
column_spec(1:8, bold = TRUE)
results_table_filtered
results_table_filtered <- reg_results_grouped %>%
mutate(intercept = map_dbl(model, ~coef(.)[1]),
unionization_rate = map_dbl(model, ~coef(.)[2]),
gdp = map_dbl(model, ~coef(.)[3]),
capex = map_dbl(model, ~coef(.)[4]),
p_union = map_dbl(model, ~summary(.)$coefficients[2,4]),
p_gdp = map_dbl(model, ~summary(.)$coefficients[3,4]),
p_capex = map_dbl(model, ~summary(.)$coefficients[4,4])) %>%
select(intercept, unionization_rate, gdp, capex, p_union, p_gdp, p_capex) %>%
mutate(across(everything(), round, 6),
p_union = format_p_value(p_union),
p_gdp = format_p_value(p_gdp),
p_capex = format_p_value(p_capex)) %>%
filter(p_union < 0.05 | p_gdp < 0.05 | p_capex < 0.05) %>%
mutate(across(c(p_union, p_gdp, p_capex), ~if_else(. == "", "", paste0(., " ")))) %>%
mutate(across(c(p_union, p_gdp, p_capex), as_factor)) %>%
kable(format = "html",
caption = "Regression Results",
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
fixed_thead = TRUE,
position = "center") %>%
column_spec(1:8, bold = TRUE)
results_table_filtered
results_table_filtered <- reg_results_grouped %>%
mutate(intercept = map_dbl(model, ~coef(.)[1]),
unionization_rate = map_dbl(model, ~coef(.)[2]),
gdp = map_dbl(model, ~coef(.)[3]),
capex = map_dbl(model, ~coef(.)[4]),
p_union = map_dbl(model, ~summary(.)$coefficients[2,4]),
p_gdp = map_dbl(model, ~summary(.)$coefficients[3,4]),
p_capex = map_dbl(model, ~summary(.)$coefficients[4,4]),
durbin_watson = map_dbl(model, ~durbinWatsonTest(.)$dw)) %>%
select(intercept, unionization_rate, gdp, capex, p_union, p_gdp, p_capex, durbin_watson) %>%
mutate(across(everything(), round, 6),
p_union = format_p_value(p_union),
p_gdp = format_p_value(p_gdp),
p_capex = format_p_value(p_capex)) %>%
filter(p_union < 0.05 | p_gdp < 0.05 | p_capex < 0.05) %>%
mutate(across(c(p_union, p_gdp, p_capex), ~if_else(. == "", "", paste0(., " ")))) %>%
mutate(across(c(p_union, p_gdp, p_capex), as_factor)) %>%
kable(format = "html",
caption = "Regression Results",
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
fixed_thead = TRUE,
position = "center") %>%
column_spec(1:8, bold = TRUE)
results_table_filtered
k <- durbinWatsonTest(reg_results[[model_index]])
k
k$p
results_table_filtered <- reg_results_grouped %>%
mutate(intercept = map_dbl(model, ~coef(.)[1]),
unionization_rate = map_dbl(model, ~coef(.)[2]),
gdp = map_dbl(model, ~coef(.)[3]),
capex = map_dbl(model, ~coef(.)[4]),
p_union = map_dbl(model, ~summary(.)$coefficients[2,4]),
p_gdp = map_dbl(model, ~summary(.)$coefficients[3,4]),
p_capex = map_dbl(model, ~summary(.)$coefficients[4,4]),
durbin_watson = map_dbl(model, ~durbinWatsonTest(.)$dw),
p_dw = map_dbl(model, ~durbinWatsonTest(.)$p)) %>%
select(intercept, unionization_rate, gdp, capex, p_union, p_gdp, p_capex, durbin_watson, p_dw) %>%
mutate(across(everything(), round, 6),
p_union = format_p_value(p_union),
p_gdp = format_p_value(p_gdp),
p_capex = format_p_value(p_capex),
p_dw = format_p_value(p_dw)) %>%
filter(p_union < 0.05 | p_gdp < 0.05 | p_capex < 0.05) %>%
mutate(across(c(p_union, p_gdp, p_capex, p_dw), ~if_else(. == "", "", paste0(., " ")))) %>%
mutate(across(c(p_union, p_gdp, p_capex, p_dw), as_factor)) %>%
kable(format = "html",
caption = "Regression Results",
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
fixed_thead = TRUE,
position = "center") %>%
column_spec(1:8, bold = TRUE)
results_table_filtered
install.packages("lmtest")
k <- bptest(reg_results[[model_index]])
k
